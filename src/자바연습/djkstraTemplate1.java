import java.util.*;

// 인접 리스트 버전
public class djkstraTemplate1 {

    private static ArrayList<Integer> answer;

    private static class Node{

    }

    public static void main(String[] args){

        int[][] graph = {{0,1,9},{0,2,3},{1,0,5},{2,1,1}};
        int start = 0;
        int n = 3;

        answerCheck();
    }

// ============================================================================================================================================================================================================================================

    // 노드 클래스 생성

    // 메인 함수
    // 1. 노드 리스트 배열 선언
    // 2. 노드 리스트 초기화
    // 3. 노드에 값 세팅
    // 4. 최소 비용 배열 선언
    // 5. 최소 비용배열 큰 수로 채우기
    // 6. 최소 비용배열 스타트 0으로 초기화
    // 7. 우선순위큐 선언 - 비용순으로
    // 8. 큐에 start 넣기
    // 9. 큐가 빌 때까지 While문
    //  9-1. 큐에서 하나 빼기
    //  9-2. 현재 노드의 현재 비용이 현재 노드의 비용보다 작으면, continue
    //  9-3. 현재 노드의 자식 노드에 대해서 for문 돌리기
    //     9-3-1. 자식 노드의 최소 비용 > 현재 노드 비용 + 자식 노드의 비용이면 자식 노드의 최소 비용을 현재 노드 비용 + 자식 노드의 비용로 업데이트
    //     9-3-2. 큐에 노드 넣기 

    private static void answerCheck(){

        System.out.println("     1 : " + answer);
        System.out.println("Answer : [1, 2, 4, 5, 3, 6]");

    }

}
